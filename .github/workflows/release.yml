# .github/workflows/release.yml

name: Create Release and Build Installers

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build_and_release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Create Inno Setup script
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cat > setup.iss << EOL
          [Setup]
          AppName=ImageCompressor
          AppVersion=${{ github.ref_name }}
          DefaultDirName={autopf}\\ImageCompressor
          OutputBaseFilename=ImageCompressor-Setup-${{ github.ref_name }}
          Compression=lzma2
          SolidCompression=yes
          WizardStyle=modern
          [Files]
          Source: "dist\\ImageCompressor.exe"; DestDir: "{app}"; Flags: ignoreversion
          [Icons]
          Name: "{group}\\ImageCompressor"; Filename: "{app}\\ImageCompressor.exe"
          Name: "{commondesktop}\\ImageCompressor"; Filename: "{app}\\ImageCompressor.exe"; Tasks: desktopicon
          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:";
          EOL
      
      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --name ImageCompressor ./src/main.py

      # --- Windows Installer ---
      - name: Install Inno Setup
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install innosetup

      - name: Compile Windows Installer
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Inno Setup 的编译器路径
          ISCC_PATH="/c/Program Files (x86)/Inno Setup 6/iscc.exe"
          # 运行编译
          "$ISCC_PATH" setup.iss
          # 准备最终产物
          echo "ASSET_PATH=$(ls Output/*.exe)" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-Setup-${{ github.ref_name }}.exe" >> $GITHUB_ENV

      # --- macOS Installer ---
      - name: Build macOS DMG
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          echo "Waiting 5 seconds for the filesystem to release locks..."
          sleep 5 # <--- 在这里添加一个5秒的延时
          create-dmg \
            --volname "ImageCompressor Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "ImageCompressor.app" 200 190 \
            --hide-extension "ImageCompressor.app" \
            --app-drop-link 600 185 \
            "ImageCompressor-${{ github.ref_name }}.dmg" \
            "dist/ImageCompressor.app"
          # 准备最终产物
          echo "ASSET_PATH=ImageCompressor-${{ github.ref_name }}.dmg" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-${{ github.ref_name }}.dmg" >> $GITHUB_ENV

      # --- Linux Installer ---
      - name: Build Linux AppImage
        if: runner.os == 'Linux'
        run: |
          # 下载所需工具
          wget -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x linuxdeploy appimagetool
          
          # 使用 linuxdeploy 部署依赖
          ./linuxdeploy --appdir AppDir --executable dist/ImageCompressor --output appimage
          
          # 打包成 AppImage
          ./appimagetool AppDir ImageCompressor-${{ github.ref_name }}.AppImage
          # 准备最终产物
          echo "ASSET_PATH=ImageCompressor-${{ github.ref_name }}.AppImage" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-${{ github.ref_name }}.AppImage" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ASSET_PATH }}
          name: ${{ env.ASSET_NAME }}