# .github/workflows/release.yml

name: Create Release and Build Installers

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build_and_release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --name ImageCompressor ./src/main.py

      # --- Windows Installer ---
      - name: Build Windows Installer
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "Waiting 2 seconds as a precaution..."
          sleep 2 # 为 Windows 添加一个简短的保险延时
          
          cat > setup.iss << EOL
          [Setup]
          AppName=ImageCompressor
          AppVersion=${{ github.ref_name }}
          DefaultDirName={autopf}\\ImageCompressor
          OutputBaseFilename=ImageCompressor-Setup-${{ github.ref_name }}
          Compression=lzma2
          SolidCompression=yes
          WizardStyle=modern
          [Files]
          Source: "dist\\ImageCompressor.exe"; DestDir: "{app}"; Flags: ignoreversion
          [Icons]
          Name: "{group}\\ImageCompressor"; Filename: "{app}\\ImageCompressor.exe"
          EOL

          choco install innosetup
          ISCC_PATH="/c/Program Files (x86)/Inno Setup 6/iscc.exe"
          "$ISCC_PATH" setup.iss
          
          echo "ASSET_PATH=$(ls Output/*.exe)" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-Setup-${{ github.ref_name }}.exe" >> $GITHUB_ENV

      # --- macOS Installer (with smart wait) ---
      - name: Build macOS DMG
        if: runner.os == 'macOS'
        run: |
          # 智能等待循环，代替 sleep 5
          echo "Waiting for .app bundle to be ready..."
          for i in {1..10}; do
            if [ -d "dist/ImageCompressor.app" ]; then
              echo ".app bundle found. Proceeding."
              break
            fi
            echo "Attempt $i: .app bundle not yet available, waiting 1 second..."
            sleep 1
          done
          
          brew install create-dmg
          create-dmg \
            --volname "ImageCompressor Installer" \
            "ImageCompressor-${{ github.ref_name }}.dmg" \
            "dist/ImageCompressor.app"
          
          echo "ASSET_PATH=ImageCompressor-${{ github.ref_name }}.dmg" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-${{ github.ref_name }}.dmg" >> $GITHUB_ENV

      # --- Linux Installer (with desktop file) ---
      - name: Build Linux AppImage
        if: runner.os == 'Linux'
        run: |
          # 1. 创建 .desktop 文件
          cat > imagecompressor.desktop << EOL
          [Desktop Entry]
          Name=ImageCompressor
          Exec=ImageCompressor
          Icon=ImageCompressor
          Type=Application
          Categories=Utility;
          EOL
          
          # 2. 下载工具
          wget -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy
          chmod +x linuxdeploy
          
          # 3. 运行部署，并传入 .desktop 文件
          ./linuxdeploy --appdir AppDir \
            --executable dist/ImageCompressor \
            --desktop-file ./imagecompressor.desktop \
            --output appimage
          
          # AppImage 会自动生成，无需再调用 appimagetool
          mv ImageCompressor-*.AppImage ImageCompressor-${{ github.ref_name }}.AppImage
          
          echo "ASSET_PATH=ImageCompressor-${{ github.ref_name }}.AppImage" >> $GITHUB_ENV
          echo "ASSET_NAME=ImageCompressor-${{ github.ref_name }}.AppImage" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ASSET_PATH }}
          name: ${{ env.ASSET_NAME }}